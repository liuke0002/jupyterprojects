回忆下正则

匹配单个字符
.	匹配任意1个字符（除了\n）
[ ]	匹配[ ]中列举的字符
\d	匹配数字，即0-9
\D	匹配非数字，即不是数字
\s	匹配空白，即 空格，tab键
\S	匹配非空白
\w	匹配单词字符，即a-z、A-Z、0-9、_
\W	匹配非单词字符

匹配多个字符的相关格式
字符	功能
*	匹配前一个字符出现0次或者无限次，即可有可无
+	匹配前一个字符出现1次或者无限次，即至少有1次
?	匹配前一个字符出现1次或者0次，即要么有1次，要么没有
{m}	匹配前一个字符出现m次
{m,n}	匹配前一个字符出现从m到n次

匹配分组
字符	功能
|	匹配左右任意一个表达式
(ab)	将括号中字符作为一个分组
\num	引用分组num匹配到的字符串
(?P<name>)	分组起别名
(?P=name)	引用别名为name分组匹配到的字符串


创建students表
create table students(
 id int unsigned primary key auto_increment not null,
 name varchar(20) default '',
 age tinyint unsigned default 0,
 height decimal(5,2),
 gender enum('male','female','secret') default 'secret',
 cls_id int unsigned default 0,
 is_delete bit default 0);
 创建classes
 create table classes(
 id int unsigned auto_increment primary key not null,
 name varchar(30) not null
 );
 插入数据
 insert into students values
 (0,'小明',18,180.00,2,1,0),
 (0,'小月月',18,180.00,2,2,0),
 (0,'彭于晏',18,185.00,1,1,0),
 (0,'刘德华',59,175.00,1,2,1),
 (0,'黄蓉',38,160.00,2,1,0),
 (0,'凤姐',18,180.00,3,2,1),
 (0,'王祖贤',18,172.00,2,1,1),
 (0,'周杰伦',18,NULL,1,1,0),
 (0,'程坤',27,181.00,1,2,0),
 (0,'刘亦菲',25,166.00,2,2,0),
 (0,'金星',33,162.00,3,3,1),
 (0,'静香',12,180.00,2,4,0),
 (0,'郭靖',12,170.00,1,4,0),
 (0,'周杰',34,176.00,1,4,0);
 +----+-----------+------+--------+--------+--------+-----------+
| id | name      | age  | height | gender | cls_id | is_delete |
+----+-----------+------+--------+--------+--------+-----------+
| 15 | 小明      |   18 | 180.00 | female |      1 |           |
| 16 | 小月月    |   18 | 180.00 | female |      2 |           |
| 17 | 彭于晏    |   18 | 185.00 | male   |      1 |           |
| 18 | 刘德华    |   59 | 175.00 | male   |      2 |          |
| 19 | 黄蓉      |   38 | 160.00 | female |      1 |           |
| 20 | 凤姐      |   18 | 180.00 | secret |      2 |          |
| 21 | 王祖贤    |   18 | 172.00 | female |      1 |          |
| 22 | 周杰伦    |   18 |   NULL | male   |      1 |           |
| 23 | 程坤      |   27 | 181.00 | male   |      2 |           |
| 24 | 刘亦菲    |   25 | 166.00 | female |      2 |           |
| 25 | 金星      |   33 | 162.00 | secret |      3 |          |
| 26 | 静香      |   12 | 180.00 | female |      4 |           |
| 27 | 郭靖      |   12 | 170.00 | male   |      4 |           |
| 28 | 周杰      |   34 | 176.00 | male   |      4 |           |
+----+-----------+------+--------+--------+--------+-----------+
 insert into classes values 
 (0,"python_01期"),
 (0,"python_02期"),
 (0,"python_04期");
 +----+--------------+
| id | name         |
+----+--------------+
|  1 | python_01期  |
|  2 | python_02期  |
|  3 | python_04期  |
+----+--------------+


查询
--查询所有字段
select * from students;
select * from classes;
查询指定字段
select id,name from students;
使用as给字段或表起名
select name as "姓名",age as "年龄" from students
select s.name from students as s
消除重复行
select distinct gender from students

条件查询
select * fron student where age>18;
select * fron student where age=18;
select * from student where age>18 and age<25;
select * from students where age>18 or height<180.00
select * from students where not (age>18 and gender-2);
模糊查询
--like
--%
--_替换一个

select * from student where name like "小%"
select * from student where name like "%小%"
查询有两个字的名字
select name from students where name like "__"
select name from students where name like "__%"
--rlike 正则
select name from student where name rlike "^周.*"

范围查询
in (1,3,8)表示在一个非连续的范围内
not in

between..and 
select name age from students where age between 18 and 24
not betweent..and


空判断
is null
is not null


排序
order by age asc id desc  先对age进行升序 如果有相同的age 然后再降序排 
asc升序
desc降序


聚合函数
count
select count(*) from students where gender=0
max
select max(age) from students  查询学生表中年龄最大的
min
select max(age) from students  查询学生表中年龄最小的
sum
select max(age) from students  查询学生表中年龄的总和
avg
计算平均年龄
select avg(age) from students
round
四舍五入
select round(avg(height),2) from students

分组
select * from students groupby gender;

select gender,group_concat(name,"_",age,"_",id) from students where gender=1 group by gender;
+--------+----------------------------------------------------------------------------------------+
| gender | group_concat(name,"_",age,"_",id)                                                      |
+--------+----------------------------------------------------------------------------------------+
| male   | 彭于晏_18_17,刘德华_59_18,周杰伦_18_22,程坤_27_23,郭靖_12_27,周杰_34_28           
+--------+----------------------------------------------------------------------------------------+

having  组内条件
select gender,grouup_concat(name) from students group by gender having avg(age)>30

分页
limit --限制查询出来的数据个数
limit start,count start表示起始的下标，count查询的个数


链接查询
内连接（取交集）
select * from students inner join classes on students.cls_id=classed.id;
+----+-----------+------+--------+--------+--------+-----------+----+--------------+
| id | name      | age  | height | gender | cls_id | is_delete | id | name         |
+----+-----------+------+--------+--------+--------+-----------+----+--------------+
| 15 | 小明      |   18 | 180.00 | female |      1 |           |  1 | python_01期  |
| 16 | 小月月    |   18 | 180.00 | female |      2 |           |  2 | python_02期  |
| 17 | 彭于晏    |   18 | 185.00 | male   |      1 |           |  1 | python_01期  |
| 18 | 刘德华    |   59 | 175.00 | male   |      2 |          |  2 | python_02期  |
| 19 | 黄蓉      |   38 | 160.00 | female |      1 |           |  1 | python_01期  |
| 20 | 凤姐      |   18 | 180.00 | secret |      2 |          |  2 | python_02期  |
| 21 | 王祖贤    |   18 | 172.00 | female |      1 |          |  1 | python_01期  |
| 22 | 周杰伦    |   18 |   NULL | male   |      1 |           |  1 | python_01期  |
| 23 | 程坤      |   27 | 181.00 | male   |      2 |           |  2 | python_02期  |
| 24 | 刘亦菲    |   25 | 166.00 | female |      2 |           |  2 | python_02期  |
| 25 | 金星      |   33 | 162.00 | secret |      3 |          |  3 | python_04期  |
+----+-----------+------+--------+--------+--------+-----------+----+--------------+
左连接left join,以左边的表为基础表进行拓展，如果没有就null
select * from students as s left join classes as c on s.cls_id=c.id;
+----+-----------+------+--------+--------+--------+-----------+------+--------------+
| id | name      | age  | height | gender | cls_id | is_delete | id   | name         |
+----+-----------+------+--------+--------+--------+-----------+------+--------------+
| 15 | 小明      |   18 | 180.00 | female |      1 |           |    1 | python_01期  |
| 17 | 彭于晏    |   18 | 185.00 | male   |      1 |           |    1 | python_01期  |
| 19 | 黄蓉      |   38 | 160.00 | female |      1 |           |    1 | python_01期  |
| 21 | 王祖贤    |   18 | 172.00 | female |      1 |          |    1 | python_01期  |
| 22 | 周杰伦    |   18 |   NULL | male   |      1 |           |    1 | python_01期  |
| 16 | 小月月    |   18 | 180.00 | female |      2 |           |    2 | python_02期  |
| 18 | 刘德华    |   59 | 175.00 | male   |      2 |          |    2 | python_02期  |
| 20 | 凤姐      |   18 | 180.00 | secret |      2 |          |    2 | python_02期  |
| 23 | 程坤      |   27 | 181.00 | male   |      2 |           |    2 | python_02期  |
| 24 | 刘亦菲    |   25 | 166.00 | female |      2 |           |    2 | python_02期  |
| 25 | 金星      |   33 | 162.00 | secret |      3 |          |    3 | python_04期  |
| 26 | 静香      |   12 | 180.00 | female |      4 |           | NULL | NULL         |
| 27 | 郭靖      |   12 | 170.00 | male   |      4 |           | NULL | NULL         
| 28 | 周杰      |   34 | 176.00 | male   |      4 |           | NULL | NULL         
+----+-----------+------+--------+--------+--------+-----------+------+--------------+


视图
主要是虚拟一个表
create view v_goods_info as select * from goods as g left join goods_cates as c on g.cate_id=c.id
show tables
drop view v_goods_info

视图的作用
1.提高了重用性，就像一个函数
2.对数据库重构，却不影响程序的运行
3.提高了安全性能，可以对不同的用户
4.让数据更加清晰

数据库事务具有ACID属性
原子性（Automatic）
一致性（Consistently）
隔离性（isolation）
持久性（Durability）

索引
索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，他们包含着对数据表里所有记录的引用指针。
查看执行时间
show profiles;
为表title_index的title列创建索引：
create index title_index on test_index(title(10))

MySQL主从同步配置
主从同步的定义
主从通过不使得数据可以从一个数据库服务器复制到其他服务器上，在复制数据时，一个服务器充当主服务器(master)，其余的服务器充当从服务器(slave)。
主从同步的好处
通过增加服务器来提高数据库的性能，在主服务器上执行写入和更新，在从服务上提供读功能，可以动态地调整从服务器的数量，从而调整整个数据库的性能。
提高数据安全，因为数据已复制到从服务器，从服务器可以终止复制进程，所以，可以在服务器上备份而不破坏主服务器相应数据
在主服务器上生成实时数据，而在从服务器上分析这些数据，从而提高主服务器的性能。









